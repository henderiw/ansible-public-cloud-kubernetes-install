---
- name: upgrade all packages on {{ inventory_hostname }}
  yum:
    name: '*'
    state: latest
  become: yes
  become_user: root
  become_method: sudo

- name: install  packages
  yum: name={{ item.pkgname }} state={{ item.state }}
  with_items:
    - { pkgname: "epel-release", state: "present"  }
    - { pkgname: "ntp", state: "present"  }
  become: yes
  become_user: root
  become_method: sudo

- name: Update /etc/hosts file on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/hosts
    line: "{{ ansible_host }} {{ inventory_hostname }}"
  become: yes
  become_user: root
  become_method: sudo

- name: Restart network service on {{ inventory_hostname }} 
  service:
    name: network
    state: restarted
  become: yes
  become_user: root
  become_method: sudo

- name: Remove old NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  become: yes
  become_user: root
  become_method: sudo

- name: Configure NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  become: yes
  become_user: root
  become_method: sudo

- name: Stop the ntpd service if running on {{ inventory_hostname }}
  service:
    name: ntpd
    state: stopped
  become: yes
  become_user: root
  become_method: sudo

- name: Manually sync time with ntp server on {{ inventory_hostname }}
  command: ntpdate -u "{{ntp_server_list[0]}}"
  become: yes
  become_user: root
  become_method: sudo

- name: Start ntpd on {{ inventory_hostname }} 
  service:
    name: ntpd
    state: started
  become: yes
  become_user: root
  become_method: sudo

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 29
  delay: 10
  become: yes
  become_user: root
  become_method: sudo

- name: install  packages
  yum: name={{ item.pkgname }} state={{ item.state }}
  with_items:
    - { pkgname: "bridge-utils", state: "present"  }
    - { pkgname: "golang", state: "present"  }
    - { pkgname: "git", state: "present"  }
  become: yes
  become_user: root
  become_method: sudo

###### Kubernetes specifics #########

- name: Add mappings to /etc/hosts
  blockinfile:
    path: /etc/hosts
    marker: ""
    block: |
      {{ item.ip }} {{ item.name }}
  with_items:
    - { name: tfMaster0, ip: 10.10.20.20 }
    - { name: tfMaster1, ip: 10.10.20.21 }
    - { name: tfMaster2, ip: 10.10.20.22 }
    - { name: tfWorker0, ip: 10.10.20.100 }
    - { name: tfWorker1, ip: 10.10.20.101 }
    - { name: tfWorker2, ip: 10.10.20.102 }
    - { name: tfWorker3, ip: 10.10.20.103 }
    - { name: tfWorker4, ip: 10.10.20.104 }
  become: yes
  become_user: root
  become_method: sudo

- name: Disable SELinux
  selinux:
    state: disabled
  become: yes
  become_user: root
  become_method: sudo

- name: Remove swapfile from /etc/fstab
  mount:
    name: swap
    fstype: swap
    state: absent
  become: yes
  become_user: root
  become_method: sudo

- name: Disable swap
  command: swapoff -a
  become: yes
  become_user: root
  become_method: sudo

# - name: Add the br_netfilter module
#   modprobe:
#     name: br_netfilter
#     state: present
#   remote_user: root
#   register: br_netfilter

- name: install docker-ce dependency packages
  yum: name={{ item.pkgname }} state={{ item.state }}
  with_items:
    - { pkgname: "yum-utils", state: "present"  }
    - { pkgname: "device-mapper-persistent-data", state: "present"  }
    - { pkgname: "lvm2", state: "present"  }
  become: yes
  become_user: root
  become_method: sudo

- name: Add docker-ce repository
  command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  become: yes
  become_user: root
  become_method: sudo

- name: install docker-ce dependency packages
  yum: name={{ item.pkgname }} state={{ item.state }}
  with_items:
    - { pkgname: "docker-ce-18.06.2.ce", state: "present"  }
  become: yes
  become_user: root
  become_method: sudo

- name: create /etc/docker directory
  file:
    path: /etc/docker
    state: directory
  become: yes
  become_user: root
  become_method: sudo

- name: create file /etc/docker/daemon.json
  file:
    path: /etc/docker/daemon.json
    state: touch
  become: yes
  become_user: root
  become_method: sudo

- name: setup daemon
  blockinfile:
    path: /etc/docker/daemon.json
    marker: ""
    block: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
      },
      "storage-driver": "overlay2",
      "storage-opts": [
        "overlay2.override_kernel_check=true"
        ]
      }
  become: yes
  become_user: root
  become_method: sudo

# - name: create /etc/systemd/system/docker.service.d directory for proxy
#   file:
#     path: /etc/systemd/system/docker.service.d
#     state: directory
#   remote_user: root

# - name: create file /etc/systemd/system/docker.service.d/http-proxy.conf
#   file:
#     path: /etc/systemd/system/docker.service.d/http-proxy.conf
#     state: touch
#   remote_user: root

# - name: add proxy content in /etc/systemd/system/docker.service.d/http-proxy.conf
#   blockinfile:
#     path: /etc/systemd/system/docker.service.d/http-proxy.conf
#     marker: ""
#     block: |
#       [Service]    
#       Environment="HTTP_PROXY=http://135.245.192.7:8000/" "NO_PROXY=localhost,10.101.2.200,10.101.2.201, 10.101.2.202, 10.101.2.203, 10.96.0.1"
#   remote_user: root

- name: daemon_reload and docker restart
  systemd:
    state: restarted
    daemon_reload: yes
    name: docker
  become: yes
  become_user: root
  become_method: sudo

- name: enable service docker and ensure it is not masked
  systemd:
    name: docker
    enabled: yes
    masked: no
  become: yes
  become_user: root
  become_method: sudo

# CRI-O

- name: Add overlay module
  modprobe:
    name: overlay
    state: present
  become: yes
  become_user: root
  become_method: sudo

- name: Add br_netfilter module
  modprobe:
    name: br_netfilter
    state: present
  become: yes
  become_user: root
  become_method: sudo

- name: create file /etc/sysctl.d/99-kubernetes-cri.conf
  file:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    state: touch
  become: yes
  become_user: root
  become_method: sudo

- name: add sysctl /etc/sysctl.d/99-kubernetes-cri.conf
  blockinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    marker: ""
    block: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
  become: yes
  become_user: root
  become_method: sudo

- name: sysctl --system
  command: sysctl --system
  become: yes
  become_user: root
  become_method: sudo

- name: Check if EPEL repo is already configured.
  stat: path="/etc/yum.repos.d/cbs.centos.org_repos_paas7-crio-311-candidate_x86_64_os_.repo"
  register: crio_repofile_result
  become_user: root

- name: Add crio repository
  command: yum-config-manager --add-repo=https://cbs.centos.org/repos/paas7-crio-311-candidate/x86_64/os/
  when: not crio_repofile_result.stat.exists
  become: yes
  become_user: root
  become_method: sudo

- name: install cri-o
  yum: name={{ item.pkgname }} state={{ item.state }} disable_gpg_check=yes
  with_items:
    - { pkgname: "cri-o", state: "present"  }
  become: yes
  become_user: root
  become_method: sudo

- name: cri-o restart
  systemd:
    state: restarted
    name: cri-o
  become: yes
  become_user: root
  become_method: sudo

# Kubernetes Repo's

- name: Check if kubernetes repo is already configured.
  stat: path="/etc/yum.repos.d/kubernetes.repo"
  register: kubernetes_repofile_result
  become_user: root

- name: ensure kubernetes.repo exists
  copy:
    content: ""
    dest: /etc/yum.repos.d/kubernetes.repo
    force: no
    group: root
    owner: root
    mode: 0644
  when: not kubernetes_repofile_result.stat.exists
  become: yes
  become_user: root
  become_method: sudo

- name: insert items in kubernetes.repo file
  blockinfile:
    path: /etc/yum.repos.d/kubernetes.repo
    marker: ""
    block: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=0
      repo_gpgcheck=0
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
             https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  when: not kubernetes_repofile_result.stat.exists
  become: yes
  become_user: root
  become_method: sudo

- name: install kubernetes packages
  yum: name={{ item.pkgname }} state={{ item.state }}
  with_items:
    - { pkgname: "kubelet", state: "present"  }
    - { pkgname: "kubeadm", state: "present"  }
    - { pkgname: "kubectl", state: "present"  }
  become: yes
  become_user: root
  become_method: sudo